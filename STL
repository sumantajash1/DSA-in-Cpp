                                    <---:::::ARRAY:::::--->
#include <array>
Initializing an array --> array<int,4> a={1,2,3,4};
Using a specific elements of an array --> a.at(2);
size of an array --> a.size();
using the 1st element of an array --> a.front();
using the last element of an array --> a.back();










                                         <---:::::VECTOR:::::--->
#include <vector>
creating a vector --> vector<int>v;
creating a vector of predefined size (size = 5 and initialize every element as 1 ) --> vector<int>v[5,1];
print the previous vector -->   for(int i:v){
                                     cout<<i<<" "<<endl;
                                  }
copying a vector to another vector --> vector <int> copy(v);
printing a specific element of an array --> v.at(2);
capacity (total memory allocated for the vector) of a vector --> v.capacity();
size (number of elements present in the array) --> v.size();
(WE CAN USE "at" "front" "back"  HERE LIKE ARRAY)
We can use "begin" and  "end" here to use the starting and and ending element in cases like Binary Search [ex :- binary_search(v.begin(),v.end(),6) ]
To add an element in the last index of an array --> v.push_back(1);
To elemenate the last element in array --> v.pop_back();
to clear all element of an array and making the size 0 --> v.clear();


                                        <---:::::DEQUE:::::--->
#include <deque>
creating a deque  --> deque<int> d;
putting element in deque --> *back --> d.push_back(1);
                             *front  --> d.push_front(2);
deleting element in deque --> *back --> d.pop_back();
                              *front --> d.pop_front();
we can also use "at" "front" "back" "empty" statements here for their usual use.
to delete elements from deque --> d.erase(d.begin(), d.begin()+1); 


                                     <---:::::SET:::::--->
#include <set>
creating a set --> set<int> s;
inserting elements in  set --> s.insert(1);
                               s.insert(2);
                               s.insert(2);
                               s.insert(3);
finding an element in set --> s.find(3);
to erase a specific element in set --> set<int>::interator it = s.begin();
                                        i++;
                                        s.erase(it);
to cdetermine a specific element is present or not in the set --> s.count(2);
to find a element in a set --> set<int>::iterator itr = s.find(5);
checking --> for(auto it=itr; it!=s.end(); it++){
                                  cout<<*it<<" ";
                                       }


                                   <---:::::SET:::::--->
#include <map>
creating a map --> map<int, string> m;
inserting element in map --> m[1] = "sumanta";
                             m[2] = "Jash";
                             m[3] = "Ayush";
                             m[4] = "Kumar";
                    or/
             m.insert ({5, asus});

printing the map --> for(auto i:m){
                           cout<<i.first<<" "<<i.second<<endl;
                        }



                                           <---::::: Algorithm :::::--->

#include <algorithm>
#include <vector> 
  Using Binary Search in vector :- vector<int> v;
                                   v.push_back(1);
                                   v.push_back(23);
                                   v.push_back(9);
                                   v.push_back(3);
                         cout<<binary_search(v.begin(), v.end(),6)<<endl;
